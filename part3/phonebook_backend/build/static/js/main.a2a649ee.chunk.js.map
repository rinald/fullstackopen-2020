{"version":3,"sources":["index.js"],"names":["baseUrl","phoneService","axios","get","then","data","person","post","id","put","delete","Notification","status","className","outcome","message","Input","text","controller","value","setValue","onChange","event","target","Filter","PersonForm","nameController","numberController","onSubmit","type","Persons","people","filter","onDelete","name","toLowerCase","includes","map","number","onClick","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setFilter","setStatus","useEffect","preventDefault","existingPerson","find","element","window","confirm","setTimeout","catch","error","undefined","response","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a2a649ee.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport axios from 'axios'\n\nimport './index.css'\n\nconst baseUrl = '/api/people'\n\nconst phoneService = {\n  getAll: () => {\n    const request = axios.get(baseUrl)\n    return request.then(({ data }) => data)\n  },\n  add: person => {\n    const request = axios.post(baseUrl, person)\n    return request.then(({ data }) => data)\n  },\n  update: (id, person) => {\n    const request = axios.put(`${baseUrl}/${id}`, person)\n    return request.then(({ data }) => data)\n  },\n  delete: id => {\n    return axios.delete(`${baseUrl}/${id}`)\n  },\n}\n\nconst Notification = ({ status }) => {\n  if (status === null) {\n    return null\n  }\n\n  return <div className={status.outcome}>{status.message}</div>\n}\n\nexport default Notification\n\nconst Input = ({ text, controller }) => {\n  const [value, setValue] = controller\n\n  const handleChange = event => {\n    setValue(event.target.value)\n  }\n\n  return (\n    <div>\n      {text} <input value={value} onChange={handleChange} />\n    </div>\n  )\n}\n\nconst Filter = ({ controller }) => (\n  <Input text={'filter shown with '} controller={controller} />\n)\n\nconst PersonForm = ({ nameController, numberController, onSubmit }) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <Input text={'name: '} controller={nameController} />\n      <Input text={'number: '} controller={numberController} />\n      <div>\n        <button type='submit'>add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Persons = ({ people, filter, onDelete }) => {\n  return people\n    .filter(({ name }) => name.toLowerCase().includes(filter.toLowerCase()))\n    .map(({ name, number, id }) => (\n      <div key={name}>\n        {name} {number}\n        <button onClick={() => onDelete(id)}>delete</button>\n      </div>\n    ))\n}\n\nconst App = () => {\n  const [people, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('')\n  const [status, setStatus] = useState(null)\n\n  useEffect(() => {\n    phoneService.getAll().then(data => setPersons(data))\n  }, [])\n\n  const handleAdd = event => {\n    event.preventDefault()\n\n    let existingPerson = people.find(element => element.name === newName)\n\n    if (existingPerson) {\n      existingPerson.number = newNumber\n      const update = window.confirm(\n        `${newName} is already added to phonebook. Replace the old number with a new one?`\n      )\n\n      if (update) {\n        phoneService\n          .update(existingPerson.id, existingPerson)\n          .then(data => {\n            setPersons(\n              people.map(person =>\n                person.id !== existingPerson.id ? person : data\n              )\n            )\n            setStatus({\n              message: `Updated ${data.name}'s phone number`,\n              outcome: 'success',\n            })\n            setNewName('')\n            setNewNumber('')\n            setTimeout(() => {\n              setStatus(null)\n            }, 5000)\n          })\n          .catch(error => {\n            if (error.response.data.error === undefined) {\n              setStatus({\n                message: `${existingPerson.name}'s information has already been removed from server`,\n                outcome: 'error',\n              })\n              setTimeout(() => {\n                setStatus(null)\n              }, 5000)\n              setPersons(\n                people.filter(person => person.id !== existingPerson.id)\n              )\n            } else {\n              setStatus({\n                message: error.response.data.error,\n                outcome: 'error',\n              })\n              setTimeout(() => {\n                setStatus(null)\n              }, 5000)\n            }\n          })\n      } else {\n        return\n      }\n    } else {\n      phoneService\n        .add({ name: newName, number: newNumber })\n        .then(data => {\n          setPersons([...people, data])\n          setStatus({ message: `Added ${data.name}`, outcome: 'success' })\n          setNewName('')\n          setNewNumber('')\n          setTimeout(() => {\n            setStatus(null)\n          }, 5000)\n        })\n        .catch(error => {\n          setStatus({ message: error.response.data.error, outcome: 'error' })\n          setTimeout(() => {\n            setStatus(null)\n          }, 5000)\n        })\n    }\n  }\n\n  const handleDelete = id => {\n    const _delete = window.confirm(\n      `Delete ${people.find(person => person.id === id).name}`\n    )\n\n    if (_delete) {\n      phoneService.delete(id).then(() => {\n        setPersons(people.filter(person => person.id !== id))\n      })\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification status={status} />\n      <Filter controller={[filter, setFilter]} />\n      <h3>Add a new</h3>\n      <PersonForm\n        onSubmit={handleAdd}\n        nameController={[newName, setNewName]}\n        numberController={[newNumber, setNewNumber]}\n      />\n      <h3>Numbers</h3>\n      <Persons people={people} filter={filter} onDelete={handleDelete} />\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}